这里介绍的 Spring AOP 是纯的 Spring 代码，和 AspectJ 没什么关系，但是 Spring 延用了 AspectJ 中的概念，
包括使用了 AspectJ 提供的 jar 包中的注解，但是不依赖于其实现功能。

后面介绍的如 @Aspect、@Pointcut、@Before、@After 等注解都是来自于 AspectJ，
但是功能的实现是纯 Spring AOP 自己实现的。

下面我们来介绍 Spring AOP 的使用方法，先从最简单的配置方式开始说起，这样读者想看源码也会比较容易。

目前 Spring AOP 一共有三种配置方式，Spring 做到了很好地向下兼容，所以大家可以放心使用。
-------------------------------------------------------------------------------------------------
a.
Spring 1.2 基于接口的配置：最早的 Spring AOP 是完全基于几个接口的，想看源码的同学可以从这里起步。
>>这里我们来理解 Advisor 的概念，它也比较简单，它内部需要指定一个 Advice，Advisor 决定该拦截哪些方法，
拦截后需要完成的工作还是内部的 Advice 来做。

>>我们得为每个 bean 都配置一个代理，之后获取 bean 的时候需要获取这个代理类的 bean 实例
（如 (UserService) context.getBean("userServiceProxy")），这显然非常不方便，不利于我们之后要使用的自动根据类型注入。
下面介绍 autoproxy 的解决方案。
 ->autoproxy：从名字我们也可以看出来，它是实现自动代理，也就是说当 Spring 发现一个 bean 需要被切面织入的时候，
 Spring 会自动生成这个 bean 的一个代理来拦截方法的执行，确保定义的切面能被执行。
 这里强调自动，也就是说 Spring 会自动做这件事，而不用像前面介绍的，我们需要显式地指定代理类的 bean。

 》去掉原来的 ProxyFactoryBean （org.springframework.aop.framework.ProxyFactoryBean）的配置，
 》改为使用 BeanNameAutoProxyCreator （DefaultAdvisorAutoProxyCreator） 来配置：

 -》BeanNameAutoProxyCreator 是自己匹配方法，然后交由内部配置 advice 来拦截处理；
 而 DefaultAdvisorAutoProxyCreator 是让 ioc 容器中的所有 advisor 来匹配方法，advisor 内部都是有 advice 的，、
 让它们内部的 advice 来执行拦截处理。

----------------------------------------------------------------------------------------------
b.

Spring 2.0 schema-based 配置：Spring 2.0 以后使用 XML 的方式来配置，使用 命名空间 <aop />

这里说的 schema-based 就是指基于 aop 这个 schema。

介绍 IOC 的时候也介绍过 Spring 是怎么解析各个命名空间的（各种 *NamespaceHandler），
解析 <aop /> 的源码在 org.springframework.aop.config.AopNamespaceHandler 中。

|->这里先介绍配置 Aspect:
<aop:config>
    <aop:aspect id="myAspect" ref="aBean">
        ...
    </aop:aspect>
</aop:config>

<bean id="aBean" class="...">
    ...
</bean>

所有的配置都在 <aop:config> 下面。

<aop:aspect > 中需要指定一个 bean，和前面介绍的 LogArgsAspect 和 LogResultAspect 一样，
我们知道该 bean 中我们需要写处理代码。然后，我们写好 Aspect 代码后，将其“织入”到合适的 Pointcut 中，这就是面向切面。

》》
<aop:config>

    <aop:pointcut id="businessService"
        expression="execution(* com.javadoop.springaoplearning.service.*.*(..))"/>

    <!--也可以像下面这样-->
    <aop:pointcut id="businessService2"
        expression="com.javadoop.SystemArchitecture.businessService()"/>

</aop:config>

>将 <aop:pointcut> 作为 <aop:config> 的直接子元素，将作为全局 Pointcut。

我们也可以在 <aop:aspect />内部配置 Pointcut，这样该 Pointcut 仅用于该 Aspect：
<aop:config>
    <aop:aspect ref="logArgsAspect">
        <aop:pointcut id="internalPointcut"
                expression="com.javadoop.SystemArchitecture.businessService()" />
    </aop:aspect>
</aop:config>
-----------------------------------------------------------------------------------------------

c.
Spring 2.0 @AspectJ 配置：使用注解的方式来配置，这种方式感觉是最方便的，还有，这里虽然叫做 @AspectJ，
但是这个和 AspectJ 其实没啥关系。

首先，我们需要依赖 aspectjweaver.jar 这个包，这个包来自于 AspectJ：

<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.8.11</version>
</dependency>

》在 @AspectJ 的配置方式中，之所以要引入 aspectjweaver 并不是因为我们需要使用 AspectJ 的处理功能，
而是因为 Spring 使用了 AspectJ 提供的一些注解，实际上还是纯的 Spring AOP 代码

如果是使用 Spring Boot 的话，添加以下依赖即可：
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-aop</artifactId>
</dependency>

首先，我们需要开启 @AspectJ 的注解配置方式，有两种方式：
> 在 xml 中配置：
<aop:aspectj-autoproxy/>

> 使用 @EnableAspectJAutoProxy
@Configuration
@EnableAspectJAutoProxy
public class AppConfig {

}

> 一旦开启了上面的配置，那么所有使用 @Aspect 注解的 bean 都会被 Spring 当做用来实现 AOP 的配置类，我们称之为一个 Aspect。

》注意了，@Aspect 注解要作用在 bean 上面，不管是使用 @Component 等注解方式，还是在 xml 中配置 bean，首先它需要是一个 bean。

> @Aspect 注解的 bean 中，我们需要配置哪些内容？
|->需要配置 Pointcut，Pointcut 在大部分地方被翻译成切点，用于定义哪些方法需要被增强或者说需要被拦截，
   有点类似于之前介绍的 Advisor 的方法匹配
   可以认为 Pointcut 就是用来匹配 Spring 容器中的所有 bean 的方法的

    @Pointcut("execution(* transfer(..))")// the pointcut expression
    private void anyOldTransfer() {}// the pointcut signature
   我们看到，@Pointcut 中使用了 execution 来正则匹配方法签名，这也是最常用的，
   除了 execution，我们再看看其他的几个比较常用的匹配方式：
   》within：指定所在类或所在包下面的方法（Spring AOP 独有）
   如 @Pointcut("within(com.javadoop.springaoplearning.service..*)")

   》@annotation：方法上具有特定的注解，如 @Subscribe 用于订阅特定的事件。
   如 @Pointcut("execution( .*(..)) && @annotation(com.javadoop.annotation.Subscribe)")

   》bean(idOrNameOfBean)：匹配 bean 的名字（Spring AOP 独有）
   如 @Pointcut("bean(*Service)")

   【Tips：上面匹配中，通常 "." 代表一个包名，".." 代表包及其子包，方法参数任意匹配使用两个点 ".."。】

|->对于 web 开发者，Spring 有个很好的建议，就是定义一个 SystemArchitecture：
@Aspect
public class SystemArchitecture {

    // web 层
    @Pointcut("within(com.javadoop.web..*)")
    public void inWebLayer() {}

    // service 层
    @Pointcut("within(com.javadoop.service..*)")
    public void inServiceLayer() {}

    // dao 层
    @Pointcut("within(com.javadoop.dao..*)")
    public void inDataAccessLayer() {}

    // service 实现，注意这里指的是方法实现，其实通常也可以使用 bean(*ServiceImpl)
    @Pointcut("execution(* com.javadoop..service.*.*(..))")
    public void businessService() {}

    // dao 实现
    @Pointcut("execution(* com.javadoop.dao.*.*(..))")
    public void dataAccessOperation() {}
}

这个 SystemArchitecture 很好理解，该 Aspect 定义了一堆的 Pointcut，
随后在任何需要 Pointcut 的地方都可以直接引用（如 xml 中的 pointcut-ref=""）。

配置 pointcut 就是配置我们需要拦截哪些方法，接下来，我们要配置需要对这些被拦截的方法做什么，也就是前面介绍的 Advice。

|->配置 Advice
注意，实际写代码的时候，不要把所有的切面都揉在一个 class 中。

@Aspect
public class AdviceExample {

    // 这里会用到我们前面说的 SystemArchitecture
    // 下面方法就是写拦截 "dao层实现"
    @Before("com.javadoop.aop.SystemArchitecture.dataAccessOperation()")
    public void doAccessCheck() {
        // ... 实现代码
    }

    // 当然，我们也可以直接"内联"Pointcut，直接在这里定义 Pointcut
    // 把 Advice 和 Pointcut 合在一起了，但是这两个概念我们还是要区分清楚的
    @Before("execution(* com.javadoop.dao.*.*(..))")
    public void doAccessCheck() {
        // ... 实现代码
    }

    @AfterReturning("com.javadoop.aop.SystemArchitecture.dataAccessOperation()")
    public void doAccessCheck() {
        // ...
    }

    @AfterReturning(
        pointcut="com.javadoop.aop.SystemArchitecture.dataAccessOperation()",
        returning="retVal")
    public void doAccessCheck(Object retVal) {
        // 这样，进来这个方法的处理时候，retVal 就是相应方法的返回值，是不是非常方便
        //  ... 实现代码
    }

    // 异常返回
    @AfterThrowing("com.javadoop.aop.SystemArchitecture.dataAccessOperation()")
    public void doRecoveryActions() {
        // ... 实现代码
    }

    @AfterThrowing(
        pointcut="com.javadoop.aop.SystemArchitecture.dataAccessOperation()",
        throwing="ex")
    public void doRecoveryActions(DataAccessException ex) {
        // ... 实现代码
    }

    // 注意理解它和 @AfterReturning 之间的区别，这里会拦截正常返回和异常的情况
    @After("com.javadoop.aop.SystemArchitecture.dataAccessOperation()")
    public void doReleaseLock() {
        // 通常就像 finally 块一样使用，用来释放资源。
        // 无论正常返回还是异常退出，都会被拦截到
    }

    // 感觉这个很有用吧，既能做 @Before 的事情，也可以做 @AfterReturning 的事情
    @Around("com.javadoop.aop.SystemArchitecture.businessService()")
    public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable {
        // start stopwatch
        Object retVal = pjp.proceed();
        // stop stopwatch
        return retVal;
    }

}

>> Spring 提供了非常简单的获取入参的方法，使用 org.aspectj.lang.JoinPoint 作为 Advice 的第一个参数即可，如：
@Before("com.javadoop.springaoplearning.aop_spring_2_aspectj.SystemArchitecture.businessService()")
public void logArgs(JoinPoint joinPoint) {
    System.out.println("方法执行前，打印入参：" + Arrays.toString(joinPoint.getArgs()));
}

》注意：第一，必须放置在第一个参数上；
       第二，如果是 @Around，我们通常会使用其子类 ProceedingJoinPoint，因为它有 procceed()/procceed(args[]) 方法。

@AspectJ 配置方式中的 Pointcut 和 Advice 的配置。
对于开发者来说，其实最重要的就是这两个了，定义 Pointcut 和使用合适的 Advice 在各个 Pointcut 上。

【最后提一点，@Aspect 中的配置不会作用于使用 @Aspect 注解的 bean】

基于@Aspect注解的Aop配置 在Xml中的配置是最少的，推荐使用