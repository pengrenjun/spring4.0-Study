<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!--spring2.0 之后基于aop Schema-base配置的AOP -->
	<context:component-scan base-package="com.smart.SpringAop2"/>


    <!--加载接口实现类-->
    <bean id="userServiceImpl" class="com.smart.SpringAop2.MethodAdvice.serviceImpl.UserServiceImpl"/>
    <bean id="xhContractServiceImpl" class="com.smart.SpringAop2.MethodAdvice.serviceImpl.XhContractServiceImpl"/>

    <!--加载自定义的切面处理代码类-->
    <bean id="afterAspect" class="com.smart.SpringAop2.schemaBased.MethodAfterAspect"/>

    <!--基于AOP Schema 配置XML-->、
    <!--<aop:config proxy-target-class="true"> 会强制使用Cglib进行动态代理-->
    <aop:config>
        <!--定义AOP XML配置的全局切点-->
        <!--service业务层方法执行切点-->
        <aop:pointcut id="servicePointCut" expression="com.smart.SpringAop2.AspectJ.SystemArchitecturePointCut.businessService()"/>

        <!--配置aspect切面和pointcut切点的联系(方法执行时什么时候织入切面上的处理代码)-->
        <aop:aspect ref="afterAspect" >
            <aop:after method="methodAfter" pointcut-ref="servicePointCut" />
        </aop:aspect>
        
    </aop:config>










</beans>

